import sys
input = sys.stdin.readline
# 문제 해설
'''
마법사당 한명의 머글을 만난다.
근데 그 마법사가 약속시간 보다 늦거나 빨라.
이러면 만약 마법사가 늦는다면, 머글이 기다리는 시간이 생기겠지?
또는 마법사가 일찍 도착하면, 마법사가 기다리는 시간도 생기겠지?
그래서 이 기다리는 시간을 최소화 시키려고 모든 약속에 동일한 시간만큼을 미루거나 당길거야.
이 미루는 시간을 T라고 하고 약속 시각을 A, 도착 시각을 B라고 한다면, 모든 대기 시간의 합은
| Ai + T - Bi | 와 같애. 이 합이 최소가 되는 서로 다른 T의 갯수를 구해봐.
'''
def solution():
    # 풀이법
    # 최소 절대 편차를 구하려면 중앙값를 구해야함.
    # n이 홀수면 중앙값은 하나가 존재하며, n이 짝수면 중앙값은 중간 2개 값의 범위에 있는 정수들이 된다.
    N = int(input())
    time_gaps = []
    for _ in range(N):
        a, b = map(int, input().split())
        time_gaps.append(a - b)
    
    if N % 2 == 1:
        print(1)
    else:
        time_gaps.sort()
        print(time_gaps[(N // 2)] - time_gaps[(N // 2) - 1] + 1) # 중앙값으로 범위를 가지는 숫자의 갯수
    # [1, 2, 3, 4, 5] => 1 | -3(-2, -1, 0, 1, 2)
    # [2, 2, 2, 2] => 1 | -2(0, 0, 0, 0)
    # [1, 1, 2, 2] => 1 | -1(0, 1, 1, 0), -2(-1, 0, 0, -1) => 2개
if __name__=="__main__":
    solution() 